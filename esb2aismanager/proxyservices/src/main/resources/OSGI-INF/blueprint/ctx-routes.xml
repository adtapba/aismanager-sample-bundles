<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0"
           xmlns:enc="http://karaf.apache.org/xmlns/jasypt/v1.0.0"
           xsi:schemaLocation="
            http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
            http://camel.apache.org/schema/blueprint  http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.2.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.2.0.xsd">

    <!-- Config properties -->
    <cm:property-placeholder id="cfgprops" persistent-id="es.apba.infra.esb.aismanager.esb2aismanager.proxyservices" update-strategy="reload"/>
        
    <bean id="cfgpropsencryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
        <property name="config">
            <bean class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
                <property name="algorithm" value="PBEWithMD5AndDES" />
                <property name="passwordEnvName" value="APBA_JASYPT_ENCRYPTION_PASSWORD" />
            </bean>
        </property>        
    </bean>
    
    <enc:property-placeholder encryptor-ref="cfgpropsencryptor"/>
    
    <bean id="jasyptPropertiesParser" class="org.apache.camel.component.jasypt.JasyptPropertiesParser">
        <property name="encryptor" ref="cfgpropsencryptor"/>
    </bean>
    
    <bean id="httpOperationFailedExceptionParser" class="es.apba.infra.esb.support.cxf.parser.HttpOperationFailedExceptionParser" />

    <!-- Integration routes -->
    <camelContext id="CtxEsb2AisManagerProxyServices" xmlns="http://camel.apache.org/schema/blueprint">       
        <propertyPlaceholder location="blueprint:cfgprops" propertiesParserRef="jasyptPropertiesParser"/> 
           
        <onException>
            <exception>java.net.ConnectException</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggingLevel="ERROR" message="${camelId} - ${routeId} - ${exchangeId} | Connect exception | ERROR | apbaTransactionId: ${header.apbaTransactionId}"/>                                     
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                <constant>503</constant>
            </setHeader>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Remote service unavailable | OUT | apbaTransactionId: ${header.apbaTransactionId} | httpResponseCodeSent: 503"/>            
        </onException>
        
        <onException>
            <exception>org.apache.camel.component.http4.HttpOperationFailedException</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggingLevel="ERROR" message="${camelId} - ${routeId} - ${exchangeId} | Exception detected | ERROR | apbaTransactionId: ${header.apbaTransactionId} | ${header[CamelExceptionCaught]}"/>            
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">  
                <simple>${bean:httpOperationFailedExceptionParser?method=getHttpResponseCode(${header[CamelExceptionCaught]})}</simple>
            </setHeader>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Remote service unavailable | OUT | apbaTransactionId: ${header.apbaTransactionId} | httpResponseCodeSent: ${header[CamelHttpResponseCode]}"/>            
        </onException>
        
        <route id="RtGeographicalLineGetVerbProcessing" streamCache="true">
            <from uri="direct-vm:GeographicalLineRestResource_getGeographicalLine" />
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Sending query ... | PROCESS | apbaTransactionId: ${header.apbaTransactionId}"/>
                        
            <removeHeaders pattern="Authorization"/>
        
            <recipientList>
                <simple>{{aisManagerDestinationEndpoint.geographicalLine.URL}}${header[CamelHttpPath]}?bridgeEndpoint=true&amp;authenticationPreemptive=true&amp;authMethod=Basic&amp;authUsername={{aisManagerDestinationEndpoint.regular.username}}&amp;authPassword={{aisManagerDestinationEndpoint.regular.password}}</simple>
            </recipientList>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query result | PROCESS | apbaTransactionId: ${header.apbaTransactionId} | remoteEndpointHttpResponseCode: ${header[CamelHttpResponseCode]}"/>            
            
            <removeHeaders pattern="*" excludePattern="apbaTransactionId" />
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                <constant>200</constant>
            </setHeader>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query processed | OUT | apbaTransactionId: ${header.apbaTransactionId} | httpResponseCodeSent: ${header[CamelHttpResponseCode]} | ${body}"/>   
        </route>
        
        <route id="RtGeographicalLinePostVerbProcessing">
            <from uri="direct-vm:GeographicalLineRestResource_createGeographicalLine" />
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Sending query ... | PROCESS | apbaTransactionId: ${header.apbaTransactionId}"/>
                        
            <removeHeaders pattern="Authorization"/>
        
            <to uri="{{aisManagerDestinationEndpoint.geographicalLine.URL}}?bridgeEndpoint=true&amp;authenticationPreemptive=true&amp;authMethod=Basic&amp;authUsername={{aisManagerDestinationEndpoint.admin.username}}&amp;authPassword={{aisManagerDestinationEndpoint.admin.password}}"/>               
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query result | PROCESS | apbaTransactionId: ${header.apbaTransactionId} | remoteEndpointHttpResponseCode: ${header[CamelHttpResponseCode]}"/>            
            
            <removeHeaders pattern="*" excludePattern="apbaTransactionId" />
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                <constant>201</constant>
            </setHeader>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query processed | OUT | apbaTransactionId: ${header.apbaTransactionId} | httpResponseCodeSent: ${header[CamelHttpResponseCode]}"/>   
        </route>
        
        <route id="RtGeographicalLinePutVerbProcessing">
            <from uri="direct-vm:GeographicalLineRestResource_updateGeographicalLine" />
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Sending query ... | PROCESS | apbaTransactionId: ${header.apbaTransactionId}"/>
                        
            <removeHeaders pattern="Authorization"/>
        
            <recipientList>
                <simple>{{aisManagerDestinationEndpoint.geographicalLine.URL}}${header[CamelHttpPath]}?bridgeEndpoint=true&amp;authenticationPreemptive=true&amp;authMethod=Basic&amp;authUsername={{aisManagerDestinationEndpoint.admin.username}}&amp;authPassword={{aisManagerDestinationEndpoint.admin.password}}</simple>
            </recipientList>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query result | PROCESS | apbaTransactionId: ${header.apbaTransactionId} | remoteEndpointHttpResponseCode: ${header[CamelHttpResponseCode]}"/>            
            
            <removeHeaders pattern="*" excludePattern="apbaTransactionId" />
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                <constant>200</constant>
            </setHeader>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query processed | OUT | apbaTransactionId: ${header.apbaTransactionId} | httpResponseCodeSent: ${header[CamelHttpResponseCode]}"/>   
        </route>
        
        <route id="RtGeographicalLineDeleteVerbProcessing">
            <from uri="direct-vm:GeographicalLineRestResource_deleteGeographicalLine" />
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Sending query ... | PROCESS | apbaTransactionId: ${header.apbaTransactionId}"/>
                        
            <removeHeaders pattern="Authorization"/>
        
            <recipientList>
                <simple>{{aisManagerDestinationEndpoint.geographicalLine.URL}}${header[CamelHttpPath]}?bridgeEndpoint=true&amp;authenticationPreemptive=true&amp;authMethod=Basic&amp;authUsername={{aisManagerDestinationEndpoint.admin.username}}&amp;authPassword={{aisManagerDestinationEndpoint.admin.password}}</simple>
            </recipientList>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query result | PROCESS | apbaTransactionId: ${header.apbaTransactionId} | remoteEndpointHttpResponseCode: ${header[CamelHttpResponseCode]}"/>            
            
            <removeHeaders pattern="*" excludePattern="apbaTransactionId" />
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                <constant>200</constant>
            </setHeader>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query processed | OUT | apbaTransactionId: ${header.apbaTransactionId} | httpResponseCodeSent: ${header[CamelHttpResponseCode]}"/>   
        </route>
        
        <route id="RtPositionGetVerbProcessing" streamCache="true">
            <from uri="direct-vm:PositionRestResource_getPosition" />
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Sending query ... | PROCESS | apbaTransactionId: ${header.apbaTransactionId}"/>
                        
            <removeHeaders pattern="Authorization"/>
        
            <recipientList>
                <simple>{{aisManagerDestinationEndpoint.position.URL}}${header[CamelHttpPath]}?bridgeEndpoint=true&amp;authenticationPreemptive=true&amp;authMethod=Basic&amp;authUsername={{aisManagerDestinationEndpoint.regular.username}}&amp;authPassword={{aisManagerDestinationEndpoint.regular.password}}</simple>
            </recipientList>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query result | PROCESS | apbaTransactionId: ${header.apbaTransactionId} | remoteEndpointHttpResponseCode: ${header[CamelHttpResponseCode]}"/>            
            
            <removeHeaders pattern="*" excludePattern="apbaTransactionId" />
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                <constant>200</constant>
            </setHeader>
            <log loggingLevel="INFO" message="${camelId} - ${routeId} - ${exchangeId} | Query processed | OUT | apbaTransactionId: ${header.apbaTransactionId} | httpResponseCodeSent: ${header[CamelHttpResponseCode]} | ${body}"/>   
        </route>
    </camelContext>

</blueprint>